/*
We'll discuss three ways to configure the relationships between tasks:
`dependsOn`, `finalizedBy`, and `mustRunAfter`.

Task A `dependsOn` task B if task A can't do its work without task B having
done its work. To take a familiar example, when you're getting up in the
morning, you can't put on your shoes without putting on your socks first.
Let's declare and configure some tasks to represent this process.
*/

task putOnSocks {
    doLast {
        println "Putting on Socks."
    }
}

task putOnShoes {
    dependsOn "putOnSocks"
    doLast {
        println "Putting on Shoes."
    }
}

/*
finalizedBy Example - When task 'B' has to run followed by task 'A'.
*/

task eatBreakfastTask {
    finalizedBy "brushingTeethTask"
    doLast {
        println "Eating breakfast. Good food, good life !!"
    }
}

task brushingTeethTask {
    doLast {
        println "Brushing my teeth with pepsodent !!"
    }
}

/*
shouldRunAfter Example - Say we have a long
running process that's unlikely to fail, like deploying some artifact to a
continuous integration server, and we also have a short running task that is
likely to fail, like running unit tests. Those two tasks don't have any
dependency relationship, but if we're running both, we would really like the
unit tests to run before the integration tests.

To continue our morning routine example, let's consider showering and putting
on a fragrance like perfume or cologne. Putting on a fragrance doesn't require
showering, and showering doesn't require putting on a fragrance, but if we're
going to both take a shower and also put on a fragrance, we should take the
shower first. Let's create those tasks and the relationship between them.
*/

task putOnFragranceTask {
    shouldRunAfter "showerTask"
    doLast {
        println "Putting on Fragrance - Boulevard"
    }
}

task showerTask {
    doLast {
        println "Having a shower with Dove !"
    }
}

/*
Lets have an exaple without ordering task
*/

task getReady {
    dependsOn = ["showerTask", "eatBreakfastTask", "putOnShoes"]
}

/*
This is an example of 'mustRunAfter' . We can order tasks using this.
*/
putOnShoes.mustRunAfter showerTask

task getEquiped {
    dependsOn tasks.matching{ task -> task.name.startsWith("putOn")}
    doLast {
        println "All geared Up !!"
    }
}