/*
Task Configuration Example. 
Notes:
I. Project interface basically takes the whole build script as closure.
*/

project.task("myTask1")
task("myTask2")
task "myTask3"
task myTask4

/*
Task - myTask4 configuration
*/

myTask4.group = "This is the catagory of the task - myTask4"
myTask4.description = "This is myTask4"
myTask4.doLast { println "This is done last."}
myTask4.doFirst { println "This is done First."}

/*
Declaring a task configuration
*/

task myTask5 {
    description "This is myTask5"
    group "Some Group"
    doLast {
        println "This is done last for myTask5"
    }
}


/*

There are two important things to know to understand this configuration
closure. The first is that when this closure is evaluated, its delegate is the
task object. That means when you're assigning to `group`, you're really
assigning to `task.group`. The second thing is that the properties of the task
object are decorated with setters with the same names. That's how we can omit
equals signs when we're to assigning to properties. We're really calling a
setter and leaving off the parentheses.

The only gotcha is that you must include the equals sign or parentheses when
assigning a collection to a property.

*/

task myTask7 {
    description("Description") // Function call works
    //description "Description" // This is identical to the line above
    group = "Some group" // Assignment also works
    doLast { // We can also omit the parentheses, because Groovy syntax
        println "Here's the action"
    }
}

/*

One more important piece of syntax. There are some task properties you can set
using the following syntax:

*/

task myTask8(description: "Another description") {
    doLast {
        println "Doing something"
    }
}
